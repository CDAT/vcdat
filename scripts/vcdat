#!/usr/bin/env python
import subprocess
import time
import requests
import sys
import tempfile
import os


def isBound(port):
    import socket
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    try:
        s.bind(("localhost", int(port)))
    except socket.error as e:
        return True
    s.close()
    return False

def getPort(env_name, start_port): # string, int
    env_port = os.environ.get(env_name)
    if(env_port != None):
        if(isBound(env_port)):
            print "{env_name} was set, but the port could not be bound. Searching for an open port automatically."
        else:
            return env_port
    for i in range(0, 30):
        port = int(start_port) + i
        if(not isBound(port)):
            return str(port)
    raise RuntimeError(
        "Failed to find an open port. Please set the %s environment variable to an open port." %
        env_name)

VCSJS_PORT = getPort("VCSJS_PORT", "8000")
VCDAT_PORT = getPort("VCDAT_PORT", "5000")

os.environ["UVCDAT_ANONYMOUS_LOG"] = "no"
logfile = tempfile.NamedTemporaryFile()

print "Logs are going to:", logfile.name

try:
    logfile.write("\nTesting VCS\n")
    logfile.flush()
    subprocess.check_output("python -c 'import vcs; x=vcs.init(); x.open()'", shell=True, stderr=logfile)
except subprocess.CalledProcessError:
    logfile.write("\nVCS failed to start. Attempting to fix LD_PRELOAD path...\n")
    logfile.flush()
    if('LD_PRELOAD' in os.environ.keys()):
        logfile.write("LD_PRELOAD was: '{}'\n".format(os.environ['LD_PRELOAD']))
        logfile.flush()
    os.environ['LD_PRELOAD'] = "/usr/lib/x86_64-linux-gnu/libstdc++.so.6"

print "Starting VCSJS on PORT:", VCSJS_PORT
vcs_server = subprocess.Popen(
    ["vcs-server", "--port", VCSJS_PORT], stdout=logfile, stderr=logfile)
time.sleep(3)
print "Starting VCDAT on PORT:", VCDAT_PORT
flask = subprocess.Popen(["python",
                          "-m",
                          "vcdat.app",
                          "--prod",
                          "--port",
                          VCDAT_PORT,
                          "--vcs_server=localhost:%s" % VCSJS_PORT],
                         stdout=logfile,
                         stderr=logfile)

# Keep looping till we get a successful response
while True:
    try:
        resp = requests.get("http://localhost:%s" % VCDAT_PORT)
    except KeyboardInterrupt:
        vcs_server.terminate()
        flask.terminate()
        exit(0)
    except BaseException:
        continue
    if resp.status_code == 200:
        import webbrowser
        webbrowser.open("http://localhost:%s" % VCDAT_PORT)
        break

# Now we'll wait till the user terminates the process.
try:
    for line in sys.stdin:
        pass
except KeyboardInterrupt:
    print ""

vcs_server.terminate()
flask.terminate()
